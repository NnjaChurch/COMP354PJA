----------------------------------------------------------------------------------------------------
 COMP 354 CODENAMES PROJECT - GENERAL GAME STRUCTURE
----------------------------------------------------------------------------------------------------

This document will outline the general game structure and how the game should interact with the 
user and events. This is just a rough idea of how everything should be implemented, and will most
likely be changed during the actual implementation, further discussion on certain aspects will be
needed in order to properly finalize the full structure of the game.

AUTHOR: Kevin McAllister (40031326)

----------------------------------------------------------------------------------------------------

GAME LAYERS:

The game will consist of several 'layers':

- The 'User Interface / GUI' layer will consist of:
	- The visual representation of the game ('Views')
	- The buttons that allow interaction between the user and the game itself
	- More specifically to Codenames:
		- NEW GAME: The ability to start a new game at any time (whether the current game is complete or not)
		- CARDS: Each card will display its CODEWORD, as well as its type (BLUE, RED, ASSASSIN, BYSTANDER) if it was revealed
			- NOTE: For Iteration 1, the cards will not be clicked as the ACTORS will run on a random / nextAction script
		- KEYCARD: The ability to display the KEYCARD in order to view the layout of the current game
			- NOTE: The keycard button should open a separate window that can be closed.
		- NEXT ACTION: A button to carry out the next action and move the game forward
		- UNDO ACTION: A button to undo the last action taken
			- NOTE: If no actions were done yet, UNDO should not be clickable
	
- The 'Controller / Event Handler' layer will consist of:
	- The Controller object that will accept events from the 'User Interface / GUI' layer:
		- Each event will call the appropriate command function and return the appropriate response
		- Events will be stored in Command objects, that will be pushed onto the Command Stack
			- NOTE: Certain commands should not be stored:
				- Only commands that change the game state should be stored (Undo, View Keycard should not be stored)
			- NOTE: Each command must have an inverse to UNDO:
				- Simple commands can such as 'Reveal Card' can just hide the card back and reset any counters
				- Complex commands must have a saved game state (Card states, counters, script position, ...)
		- UNDO will pop the top Command in the stack and carry out its UNDO action (restore game state saved in Command)
		- NEW GAME should empty the stack, reset any counters back to default and generate a new fresh gamestate

- The 'Command' layer will consist of:
	- All commands that can be executed:
		- Code that will unpack sent data, process and return the appropriate data
		- Each command will be stored in a Command Object which includes:
			- The type of command (New Game, Next Action)
			- The data recieved
			- The command function that was executed
			- A save state of the game before the command was executed
			- A reference to the command function that will undo (not needed if game state restores will be used instead)
			- The data returned

- The 'Database' layer will consist of:
	- All interactions with the Database (if SQL is used) or Text Files (.txt interaction):
		- NOTE: For Iteration 1, the only interaction should be when the game is generated (picking CodeWords)
		- NOTE: For Iteration 2, the interaction with Clues needs to be implemented (can be implemented earlier)